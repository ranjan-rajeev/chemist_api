#!/usr/bin/env node

/**
 * Module dependencies.
 */



var cluster = require('cluster');

if (cluster.isMaster) {
    var numWorkers = require('os').cpus().length;

    console.log('Master cluster setting up ' + numWorkers + ' workers...');

    for (var i = 0; i < numWorkers; i++) {
        cluster.fork();
    }

    cluster.on('online', function (worker) {
        console.log('Worker ' + worker.process.pid + ' is online');
    });

    cluster.on('exit', function (worker, code, signal) {
        console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
        console.log('Starting a new worker');
        cluster.fork();
    });
} else {
    var app = require('../app');
    var debug = require('debug')('backofficenode:server');
    var http = require('http');
    var mongoose = require('mongoose');
    process.env.NODE_ENV = 'development';
    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '8080');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        //logger.error('error', error.message, error.stack);
        // 0 = disconnected, 1 = connected, 2 = connecting, 3 = disconnecting
//        if (mongoose.connection.readyState > 0) {
//            var error = new ErrorLog({error: error});
//            error.save();
//        }
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
                ? 'Pipe ' + port
                : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                if (process.env.NODE_ENV === "development") {
                    process.exit(1);
                }
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
                ? 'pipe ' + addr
                : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}




console.log(process.env.NODE_ENV + " " + "mode on");
